#include <stdio.h>
#include <mach/thread_policy.h>
#include <mach/task_info.h>
#include <sys/types.h>
#include <sys/sysctl.h>
#include <unistd.h>
#include <sched.h>
#include <pthread.h>
#include <mach/thread_policy.h>
#include <mach/thread_act.h>
#define SYSCTL_CORE_COUNT   "machdep.cpu.core_count"

typedef struct cpu_set {
  uint32_t    count;
} cpu_set_t;

static inline void
CPU_ZERO(cpu_set_t *cs) { cs->count = 0; }

static inline void
CPU_SET(int num, cpu_set_t *cs) { cs->count |= (1 << num); }

static inline int
CPU_ISSET(int num, cpu_set_t *cs) { return (cs->count & (1 << num)); }

int sched_getaffinity(pid_t pid, size_t cpu_size, cpu_set_t *cpu_set)
{
  int32_t core_count = 0;
  size_t  len = sizeof(core_count);
  int ret = sysctlbyname(SYSCTL_CORE_COUNT, &core_count, &len, 0, 0);
  if (ret) {
    printf("error while get core count %d\n", ret);
    return -1;
  }
  cpu_set->count = 0;
  for (int i = 0; i < core_count; i++) {
    cpu_set->count |= (1 << i);
  }

  return 0;
}

int pthread_setaffinity_np(pthread_t thread, size_t cpu_size,
                           cpu_set_t *cpu_set)
{
  thread_port_t mach_thread;
  int core = 0;

  for (core = 0; core < 8 * cpu_size; core++) {
    if (CPU_ISSET(core, cpu_set)) break;
  }
  printf("binding to core %d\n", core);
  thread_affinity_policy_data_t policy = { core };
  mach_thread = pthread_mach_thread_np(thread);
  thread_policy_set(mach_thread, THREAD_AFFINITY_POLICY,
                    (thread_policy_t)&policy, 1);
  return 0;
}


##################

#elif __APPLE__
            // start the thread with the received parameters
            if (pthread_create_suspended_np(thread_instance, NULL, function, params)) {
                free(new_thread);
                return THREAD_PTHREAD_CREATION_ERROR;
            }

            thread_affinity_policy_data_t policy_data = { core_number + 1 }; // do not use policy 0 (not set)
            mach_port_t mach_thread = pthread_mach_thread_np(*thread_instance);
            thread_policy_set((thread_t)thread_instance, THREAD_AFFINITY_POLICY, (thread_policy_t)&policy_data, 1);

            thread_resume(mach_thread);
